Prefix(:=<ontoplex/>)
Prefix(fowl:=<https://github.com/gavel-tool/python-gavel-owl/>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)


Ontology(
Declaration(Class(:AbstractEntity))
AnnotationAssertion(:comment :AbstractEntity "The type of abstract objects used for reification and similar purposes. Their names usually start with an _underscore")

Declaration(Class(:Bound))
AnnotationAssertion(:comment :Bound "The type of classes of functions N --> N, e.g. Poly : Bound represents the class of polynomials")

Declaration(Class(:Class))
AnnotationAssertion(:comment :Class "Complexity classes")

Declaration(Class(:Class.Relative))
AnnotationAssertion(:comment :Class.Relative "A technical sybtype of type :Class used to mark classes that are defined as relative to oracles, e.g. P[power][sharp]P")

Declaration(Class(:Hierarchy))
AnnotationAssertion(:comment :Hierarchy "Abstract objects representing hierarchies, e.g. _ph for the polynomial hierarchy. Note that _ph is different from PH, which is the union of classes in _ph, and has type :Class")

Declaration(Class(:LevelOfHierarchy))
AnnotationAssertion(:comment :LevelOfHierarchy "Abstract objects representing the levels of hierarchies")

Declaration(Class(:Oracle))
AnnotationAssertion(:comment :Oracle "A technical subtype of type :Problem used to mark problems that are defined in the literature with a purpose to serve as oracles")

Declaration(Class(:Problem))
AnnotationAssertion(:comment :Problem "Decision problems")

Declaration(ObjectProperty(:AbstractRelation))
AnnotationAssertion(:comment :AbstractRelation "Relations whose domain and/or range is :AbstractEntity")

Declaration(ObjectProperty(:SpaceHierarchy))
AnnotationAssertion(:comment :SpaceHierarchy "A technical relation used for the Space Hierarchy theorem. Do not use in data!")

Declaration(ObjectProperty(:TimeHierarchy))
AnnotationAssertion(:comment :TimeHierarchy "A technical relation used for the Time Hierarchy theorem. Do not use in data!")

Declaration(ObjectProperty(:bpTime))
AnnotationAssertion(:comment :bpTime "A defining relation standing for BPTIME. E.g. :BPP is defined as :bpTime(:BPP, :Poly)")

Declaration(ObjectProperty(:dSpace))
AnnotationAssertion(:comment :dSpace "A defining relation standing for DSPACE. E.g. :PSpace is defined as :dSpace(:PSpace, :Poly)")

Declaration(ObjectProperty(:dTime))
AnnotationAssertion(:comment :dTime "A defining relation standing for DTIME. E.g. :P is defined as :dTime(:P, :Poly)")

Declaration(ObjectProperty(:definitionRelation))
AnnotationAssertion(:comment :definitionRelation "Relations used for representing class definitions")

Declaration(ObjectProperty(:extends))
AnnotationAssertion(:comment :extends "Relations used to express that the definition of the source class is obtained by extending (by additional computational power) the definition of the target class")

Declaration(ObjectProperty(:extendsByAdvice))
AnnotationAssertion(:comment :extendsByAdvice "Relations used to express that the source class is a nonuniform version of the target class")

Declaration(ObjectProperty(:extendsByAdvice_logarithmic))
AnnotationAssertion(:comment :extendsByAdvice_logarithmic "Expresses the relation that is e.g. between :P/log and :P")

Declaration(ObjectProperty(:extendsByAdvice_polynomial))
AnnotationAssertion(:comment :extendsByAdvice_polynomial "Expresses the relation that is e.g. between :P/poly and :P")

Declaration(ObjectProperty(:extendsByBoundedProbability))
AnnotationAssertion(:comment :extendsByBoundedProbability "Expresses the relation that is e.g. between :BPP and :P")

Declaration(ObjectProperty(:extendsByNondeterminism))
AnnotationAssertion(:comment :extendsByNondeterminism "Expresses the relation that is e.g. between :NP and :P")

Declaration(ObjectProperty(:extendsByRandomness))
AnnotationAssertion(:comment :extendsByRandomness "Expresses the relation that is e.g. between :RP and :P")

Declaration(ObjectProperty(:hasBase))
AnnotationAssertion(:comment :hasBase "Expresses the relation between the relativesed class and the base class")

Declaration(ObjectProperty(:hasPower))
AnnotationAssertion(:comment :hasPower "Expresses the relation between the relativised class and the oracle")

Declaration(ObjectProperty(:isClassOfComplementsFor))
AnnotationAssertion(:comment :isClassOfComplementsFor "Expresses the relation that is e.g. between :coNP and :NP")

Declaration(ObjectProperty(:isEqualTo))
AnnotationAssertion(:comment :isEqualTo "Says that the source class is equal (as a set of decision problems) to the target class")

Declaration(ObjectProperty(:isFromHierarchy))
AnnotationAssertion(:comment :isFromHierarchy "Expresses that a class makes part of a hierarchy, e.g. :isFromHierarchy(Sigma^p_2, +ph)")

Declaration(ObjectProperty(:isFunctionVersionOf))
AnnotationAssertion(:comment :isFunctionVersionOf "Expresses the relation that is between e.g. :FP and :P")

Declaration(ObjectProperty(:isHardFor))
AnnotationAssertion(:comment :isHardFor "Says that a problem is hard for a class")

Declaration(ObjectProperty(:isHardFor_wrtLogSpaceReductions))
AnnotationAssertion(:comment :isHardFor_wrtLogSpaceReductions "Says that a problem is hard for a class w.r.t. reductions computable in logarithmic space")

Declaration(ObjectProperty(:isHardFor_wrtPolyTimeReductions))
AnnotationAssertion(:comment :isHardFor_wrtPolyTimeReductions "Says that a problem is hard for a class w.r.t. reductions computable in polynomial time")

Declaration(ObjectProperty(:isLevelOf))
AnnotationAssertion(:comment :isLevelOf "An abstract relation between an object representing a level of a hierarchy and the object standing for that hierarchy")

Declaration(ObjectProperty(:isMemberOf))
AnnotationAssertion(:comment :isMemberOf "Says that a problem is a member of a class")

Declaration(ObjectProperty(:isNextLevel))
AnnotationAssertion(:comment :isNextLevel "An abstract relation pointing from an object standing for a level of a hierarchy to that standing for the next level")

Declaration(ObjectProperty(:isNotSubClassOf))
AnnotationAssertion(:comment :isNotSubClassOf "Says that the source class is _not_ a subset of the target class")

Declaration(ObjectProperty(:isOnLevel))
AnnotationAssertion(:comment :isOnLevel "An abstract relation saying that a class belongs to a level [of a hierarchy]")

Declaration(ObjectProperty(:isParityVersionOf))
AnnotationAssertion(:comment :isParityVersionOf "Expresses the relation that is e.g. between [plus]P and P")

Declaration(ObjectProperty(:isReducibleTo))
AnnotationAssertion(:comment :isReducibleTo "Says that the source problem is reducible to the target problem")

Declaration(ObjectProperty(:isReducibleTo_inLogSpace))
AnnotationAssertion(:comment :isReducibleTo_inLogSpace "Says that the source problem is reducible to the target problem in logarithmic space")

Declaration(ObjectProperty(:isReducibleTo_inPolyTime))
AnnotationAssertion(:comment :isReducibleTo_inPolyTime "Says that the source problem is reducible to the target problem in polynomial time")

Declaration(ObjectProperty(:isStrictSubClassOf))
AnnotationAssertion(:comment :isStrictSubClassOf "Sats that the source class is a strict subset of the target class")

Declaration(ObjectProperty(:isSubClassOf))
AnnotationAssertion(:comment :isSubClassOf "Says that the source class is a subset of the target class")

Declaration(ObjectProperty(:isUnionOf))
AnnotationAssertion(:comment :isUnionOf "An abstract relation between a class that is a union of all classes in a certain hierarchy and the object standing for that hierarchy, e.g. :isUnionOf(:PH, :_ph)")

Declaration(ObjectProperty(:lessless))
AnnotationAssertion(:comment :lessless "A relation between classes of functions N --> N, :lessless(F, G) means that for every function f from F there is a function g from G such that (f log f) is o(g)")

Declaration(ObjectProperty(:modifierRelation))

AnnotationAssertion(:comment :modifierRelation "Relations used to express that the definition of the source class is obtained by a modification of the definition of the target class, e.g. going from :P to :[sharp]P")

Declaration(ObjectProperty(:nSpace))
AnnotationAssertion(:comment :nSpace "A defining relation standing for NSPACE. E.g. :NL can be defined as :nSpace(:NL, :Log)")

Declaration(ObjectProperty(:nTime))
AnnotationAssertion(:comment :nTime "A defining relation standing for NSPACE. E.g. :NP can be defined as :nTime(:NP, :Poly)")

Declaration(ObjectProperty(:rTime))
AnnotationAssertion(:comment :rTime "A defining relation standing for RTIME. E.g. :RP can be defined as :rTime(:RP, :Poly)")

Declaration(AnnotationProperty(:zoo/body))
Declaration(AnnotationProperty(:zoo/head))

Declaration(AnnotationProperty(:hypothesis))
Declaration(AnnotationProperty(:reference))
Declaration(AnnotationProperty(fowl:tptp_annotation))

############################
#   Object Properties
############################

# Object Property: :bpTime (:bpTime)

SubObjectPropertyOf(:bpTime :definitionRelation)
FunctionalObjectProperty(:bpTime)
AsymmetricObjectProperty(:bpTime)
IrreflexiveObjectProperty(:bpTime)
ObjectPropertyDomain(:bpTime :Class)

# Object Property: :dSpace (:dSpace)

SubObjectPropertyOf(:dSpace :definitionRelation)
FunctionalObjectProperty(:dSpace)
AsymmetricObjectProperty(:dSpace)
IrreflexiveObjectProperty(:dSpace)

# Object Property: :dTime (:dTime)

SubObjectPropertyOf(:dTime :definitionRelation)
FunctionalObjectProperty(:dTime)
AsymmetricObjectProperty(:dTime)
IrreflexiveObjectProperty(:dTime)

# Object Property: :definitionRelation (:definitionRelation)

AsymmetricObjectProperty(:definitionRelation)
IrreflexiveObjectProperty(:definitionRelation)
ObjectPropertyDomain(:definitionRelation :Class)
ObjectPropertyRange(:definitionRelation :Bound)

# Object Property: :extends (:extends)

SubObjectPropertyOf(:extends :modifierRelation)
FunctionalObjectProperty(:extends)
AsymmetricObjectProperty(:extends)
IrreflexiveObjectProperty(:extends)

# Object Property: :extendsByAdvice (:extendsByAdvice)

SubObjectPropertyOf(:extendsByAdvice :extends)

# Object Property: :extendsByAdvice_logarithmic (:extendsByAdvice_logarithmic)

SubObjectPropertyOf(:extendsByAdvice_logarithmic :extends)

# Object Property: :extendsByAdvice_polynomial (:extendsByAdvice_polynomial)

SubObjectPropertyOf(:extendsByAdvice_polynomial :extends)

# Object Property: :extendsByBoundedProbability (:extendsByBoundedProbability)

SubObjectPropertyOf(:extendsByBoundedProbability :extends)

# Object Property: :extendsByNondeterminism (:extendsByNondeterminism)

SubObjectPropertyOf(:extendsByNondeterminism :extends)

# Object Property: :extendsByRandomness (:extendsByRandomness)

SubObjectPropertyOf(:extendsByRandomness :extends)

# Object Property: :hasBase (:hasBase)

FunctionalObjectProperty(:hasBase)
AsymmetricObjectProperty(:hasBase)
IrreflexiveObjectProperty(:hasBase)
ObjectPropertyDomain(:hasBase :Class)
ObjectPropertyRange(:hasBase :Class)

# Object Property: :hasPower (:hasPower)

FunctionalObjectProperty(:hasPower)
AsymmetricObjectProperty(:hasPower)
IrreflexiveObjectProperty(:hasPower)
ObjectPropertyDomain(:hasPower :Class)
ObjectPropertyRange(:hasPower :Problem)

# Object Property: :isClassOfComplementsFor (:isClassOfComplementsFor)

SubObjectPropertyOf(:isClassOfComplementsFor :modifierRelation)
FunctionalObjectProperty(:isClassOfComplementsFor)
InverseFunctionalObjectProperty(:isClassOfComplementsFor)

# Object Property: :isEqualTo (:isEqualTo)

SubObjectPropertyOf(:isEqualTo :isSubClassOf)
SymmetricObjectProperty(:isEqualTo)
ReflexiveObjectProperty(:isEqualTo)

# Object Property: :isFromHierarchy (:isFromHierarchy)

SubObjectPropertyOf(:isFromHierarchy :AbstractRelation)
FunctionalObjectProperty(:isFromHierarchy)
AsymmetricObjectProperty(:isFromHierarchy)
IrreflexiveObjectProperty(:isFromHierarchy)
ObjectPropertyDomain(:isFromHierarchy :Class)
ObjectPropertyRange(:isFromHierarchy :Hierarchy)

# Object Property: :isFunctionVersionOf (:isFunctionVersionOf)

SubObjectPropertyOf(:isFunctionVersionOf :modifierRelation)
FunctionalObjectProperty(:isFunctionVersionOf)
AsymmetricObjectProperty(:isFunctionVersionOf)
IrreflexiveObjectProperty(:isFunctionVersionOf)

# Object Property: :isHardFor (:isHardFor)

AsymmetricObjectProperty(:isHardFor)
IrreflexiveObjectProperty(:isHardFor)
ObjectPropertyDomain(:isHardFor :Problem)
ObjectPropertyRange(:isHardFor :Class)

# Object Property: :isHardFor_wrtLogSpaceReductions (:isHardFor_wrtLogSpaceReductions)

SubObjectPropertyOf(:isHardFor_wrtLogSpaceReductions :isHardFor_wrtPolyTimeReductions)
AsymmetricObjectProperty(:isHardFor_wrtLogSpaceReductions)
IrreflexiveObjectProperty(:isHardFor_wrtLogSpaceReductions)

# Object Property: :isHardFor_wrtPolyTimeReductions (:isHardFor_wrtPolyTimeReductions)

SubObjectPropertyOf(:isHardFor_wrtPolyTimeReductions :isHardFor)
AsymmetricObjectProperty(:isHardFor_wrtPolyTimeReductions)
IrreflexiveObjectProperty(:isHardFor_wrtPolyTimeReductions)

# Object Property: :isLevelOf (:isLevelOf)

SubObjectPropertyOf(:isLevelOf :AbstractRelation)
FunctionalObjectProperty(:isLevelOf)
AsymmetricObjectProperty(:isLevelOf)
IrreflexiveObjectProperty(:isLevelOf)
ObjectPropertyDomain(:isLevelOf :LevelOfHierarchy)
ObjectPropertyRange(:isLevelOf :Hierarchy)

# Object Property: :isMemberOf (:isMemberOf)

AsymmetricObjectProperty(:isMemberOf)
IrreflexiveObjectProperty(:isMemberOf)
ObjectPropertyDomain(:isMemberOf :Problem)
ObjectPropertyRange(:isMemberOf :Class)

# Object Property: :isNextLevel (:isNextLevel)

SubObjectPropertyOf(:isNextLevel :AbstractRelation)
FunctionalObjectProperty(:isNextLevel)
InverseFunctionalObjectProperty(:isNextLevel)
AsymmetricObjectProperty(:isNextLevel)
IrreflexiveObjectProperty(:isNextLevel)
ObjectPropertyDomain(:isNextLevel :LevelOfHierarchy)
ObjectPropertyRange(:isNextLevel :LevelOfHierarchy)

# Object Property: :isNotSubClassOf (:isNotSubClassOf)

IrreflexiveObjectProperty(:isNotSubClassOf)
ObjectPropertyDomain(:isNotSubClassOf :Class)
ObjectPropertyRange(:isNotSubClassOf :Class)

# Object Property: :isOnLevel (:isOnLevel)

SubObjectPropertyOf(:isOnLevel :isLevelOf)
AsymmetricObjectProperty(:isOnLevel)
IrreflexiveObjectProperty(:isOnLevel)

# Object Property: :isParityVersionOf (:isParityVersionOf)

SubObjectPropertyOf(:isParityVersionOf :modifierRelation)
FunctionalObjectProperty(:isParityVersionOf)
AsymmetricObjectProperty(:isParityVersionOf)
IrreflexiveObjectProperty(:isParityVersionOf)

# Object Property: :isReducibleTo (:isReducibleTo)

ObjectPropertyDomain(:isReducibleTo :Problem)
ObjectPropertyRange(:isReducibleTo :Problem)

# Object Property: :isReducibleTo_inLogSpace (:isReducibleTo_inLogSpace)

SubObjectPropertyOf(:isReducibleTo_inLogSpace :isReducibleTo_inPolyTime)

# Object Property: :isReducibleTo_inPolyTime (:isReducibleTo_inPolyTime)

SubObjectPropertyOf(:isReducibleTo_inPolyTime :isReducibleTo)

# Object Property: :isStrictSubClassOf (:isStrictSubClassOf)

SubObjectPropertyOf(:isStrictSubClassOf :isSubClassOf)
AsymmetricObjectProperty(:isStrictSubClassOf)
IrreflexiveObjectProperty(:isStrictSubClassOf)

# Object Property: :isSubClassOf (:isSubClassOf)

ReflexiveObjectProperty(:isSubClassOf)
ObjectPropertyDomain(:isSubClassOf :Class)
ObjectPropertyRange(:isSubClassOf :Class)

# Object Property: :isUnionOf (:isUnionOf)

SubObjectPropertyOf(:isUnionOf :AbstractRelation)
FunctionalObjectProperty(:isUnionOf)
AsymmetricObjectProperty(:isUnionOf)
IrreflexiveObjectProperty(:isUnionOf)
ObjectPropertyDomain(:isUnionOf :Class)
ObjectPropertyRange(:isUnionOf :Hierarchy)

# Object Property: :lessless (:lessless)

AsymmetricObjectProperty(:lessless)
IrreflexiveObjectProperty(:lessless)
ObjectPropertyDomain(:lessless :Bound)
ObjectPropertyRange(:lessless :Bound)

# Object Property: :modifierRelation (:modifierRelation)

AsymmetricObjectProperty(:modifierRelation)
IrreflexiveObjectProperty(:modifierRelation)
ObjectPropertyDomain(:modifierRelation :Class)
ObjectPropertyRange(:modifierRelation :Class)

# Object Property: :nSpace (:nSpace)

SubObjectPropertyOf(:nSpace :definitionRelation)
FunctionalObjectProperty(:nSpace)
AsymmetricObjectProperty(:nSpace)
IrreflexiveObjectProperty(:nSpace)

# Object Property: :nTime (:nTime)

SubObjectPropertyOf(:nTime :definitionRelation)
FunctionalObjectProperty(:nTime)
AsymmetricObjectProperty(:nTime)
IrreflexiveObjectProperty(:nTime)

# Object Property: :rTime (:rTime)

SubObjectPropertyOf(:rTime :definitionRelation)
FunctionalObjectProperty(:rTime)
AsymmetricObjectProperty(:rTime)
IrreflexiveObjectProperty(:rTime)


############################
#   Classes
############################

# Class: :AbstractEntity (:AbstractEntity)


# Class: :Bound (:Bound)


# Class: :Class (:Class)


# Class: :Class.Relative (:Class.Relative)

SubClassOf(:Class.Relative :Class)

# Class: :Hierarchy (:Hierarchy)

SubClassOf(:Hierarchy :AbstractEntity)

# Class: :LevelOfHierarchy (:LevelOfHierarchy)

SubClassOf(:LevelOfHierarchy :AbstractEntity)

# Class: :Oracle (:Oracle)

SubClassOf(:Oracle :Problem)

# Class: :Problem (:Problem)



DisjointClasses(:AbstractEntity :Bound :Class :Problem)
)