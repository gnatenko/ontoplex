Prefix(:=<>)

Ontology(<Ontoplex/Exp>
  
  Declaration(Class(:DecisionProblem))
  Declaration(Class(:ComplexityClass))
  
  Declaration(NamedIndividual(:EXP))
  Declaration(NamedIndividual(:P))
  Declaration(NamedIndividual(:PSPACE))
  Declaration(NamedIndividual(:MA))
  Declaration(NamedIndividual(:NP))
  Declaration(NamedIndividual(:ZPP))
  Declaration(NamedIndividual(:NEXP))
  Declaration(NamedIndividual(:Ppoly))
  Declaration(NamedIndividual(:PwithEOracle))
  
  ClassAssertion(:ComplexityClass :EXP)
  ClassAssertion(:ComplexityClass :P)
  ClassAssertion(:ComplexityClass :PSPACE)
  ClassAssertion(:ComplexityClass :MA)
  ClassAssertion(:ComplexityClass :NP)
  ClassAssertion(:ComplexityClass :ZPP)
  ClassAssertion(:ComplexityClass :NEXP)
  ClassAssertion(:ComplexityClass :Ppoly)
  ClassAssertion(:ComplexityClass :PwithEOracle)
  
  Declaration(ObjectProperty(:isEqualTo))
  Declaration(ObjectProperty(:isSubClassOf))
  Declaration(ObjectProperty(:isCompleteFor))
  Declaration(ObjectProperty(:isContainedIn))
  Declaration(ObjectProperty(:hasDescriptiveComplexity))
  
  ObjectPropertyDomain(:isEqualTo :ComplexityClass)
  ObjectPropertyRange(:isEqualTo :ComplexityClass)
  
  ObjectPropertyDomain(:isSubClassOf :ComplexityClass)
  ObjectPropertyRange(:isSubClassOf :ComplexityClass)
  
  ObjectPropertyDomain(:isCompleteFor :DecisionProblem)
  ObjectPropertyRange(:isCompleteFor :ComplexityClass)
  
  ObjectPropertyDomain(:isContainedIn :DecisionProblem)
  ObjectPropertyRange(:isContainedIn :ComplexityClass)
  
  ObjectPropertyDomain(:hasDescriptiveComplexity :ComplexityClass)
  ObjectPropertyRange(:hasDescriptiveComplexity :LogicalFormalism)
  
  ObjectPropertyAssertion(:isEqualTo :EXP :PwithEOracle)
  
  ObjectPropertyAssertion(:isSubClassOf :PSPACE :EXP)
  
  ObjectPropertyAssertion(:hasDescriptiveComplexity :EXP :SO_2toNtoConst)
  ObjectPropertyAssertion(:hasDescriptiveComplexity :EXP :SO_LFP)
)
