Prefix(:=<>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(fowl:=<https://github.com/gavel-tool/python-gavel-owl/>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)


Ontology(
Declaration(Class(:Bound))
Declaration(Class(:ComplexityClass))
Declaration(Class(:DecisionProblem))
Declaration(Class(:Hierarchy))
Declaration(ObjectProperty(:SpaceHierarchy))
Declaration(ObjectProperty(:TimeHierarchy))
Declaration(ObjectProperty(:bpTime))
Declaration(ObjectProperty(:dSpace))
Declaration(ObjectProperty(:dTime))
Declaration(ObjectProperty(:definitionRelation))
Declaration(ObjectProperty(:extendsByBoundedProbability))
Declaration(ObjectProperty(:extendsByNondeterminism))
Declaration(ObjectProperty(:hasBase))
Declaration(ObjectProperty(:hasPower))
Declaration(ObjectProperty(:isClassOfComplementsFor))
Declaration(ObjectProperty(:isEqualTo))
Declaration(ObjectProperty(:isFromHierarchy))
Declaration(ObjectProperty(:isHardFor))
Declaration(ObjectProperty(:isHardFor_wrtLogSpaceReductions))
Declaration(ObjectProperty(:isHardFor_wrtPolyTimeReductions))
Declaration(ObjectProperty(:isLevelOf))
Declaration(ObjectProperty(:isMemberOf))
Declaration(ObjectProperty(:isOnLevel))
Declaration(ObjectProperty(:isReducibleTo))
Declaration(ObjectProperty(:isReducibleTo_inLogSpace))
Declaration(ObjectProperty(:isReducibleTo_inPolyTime))
Declaration(ObjectProperty(:isStrictSubClassOf))
Declaration(ObjectProperty(:isSubClassOf))
Declaration(ObjectProperty(:isUnionOf))
Declaration(ObjectProperty(:lessless))
Declaration(ObjectProperty(:modifierRelation))
Declaration(ObjectProperty(:nSpace))
Declaration(ObjectProperty(:nTime))
Declaration(ObjectProperty(:next_inPH))
Declaration(ObjectProperty(:rTime))
Declaration(NamedIndividual(:BPP))
Declaration(NamedIndividual(:Elementary))
Declaration(NamedIndividual(:Exp))
Declaration(NamedIndividual(:ExpTime))
Declaration(NamedIndividual(:L))
Declaration(NamedIndividual(:Log))
Declaration(NamedIndividual(:NExpTime))
Declaration(NamedIndividual(:NL))
Declaration(NamedIndividual(:NP))
Declaration(NamedIndividual(:NPSpace))
Declaration(NamedIndividual(:P))
Declaration(NamedIndividual(:PSpace))
Declaration(NamedIndividual(:Poly))
Declaration(NamedIndividual(:Tower))
Declaration(NamedIndividual(:coNL))
Declaration(NamedIndividual(:coNP))
Declaration(NamedIndividual(<2Exp>))
Declaration(NamedIndividual(<2ExpTime>))
Declaration(AnnotationProperty(fowl:tptp_annotation))

############################
#   Object Properties
############################

# Object Property: :SpaceHierarchy (:SpaceHierarchy)

SubObjectPropertyOf(:SpaceHierarchy :isStrictSubClassOf)

# Object Property: :TimeHierarchy (:TimeHierarchy)

SubObjectPropertyOf(:TimeHierarchy :isStrictSubClassOf)

# Object Property: :bpTime (:bpTime)

SubObjectPropertyOf(:bpTime :definitionRelation)

# Object Property: :dSpace (:dSpace)

SubObjectPropertyOf(:dSpace :definitionRelation)

# Object Property: :dTime (:dTime)

SubObjectPropertyOf(:dTime :definitionRelation)

# Object Property: :definitionRelation (:definitionRelation)

FunctionalObjectProperty(:definitionRelation)
ObjectPropertyDomain(:definitionRelation :ComplexityClass)
ObjectPropertyRange(:definitionRelation :Bound)

# Object Property: :extendsByBoundedProbability (:extendsByBoundedProbability)

SubObjectPropertyOf(:extendsByBoundedProbability :modifierRelation)

# Object Property: :extendsByNondeterminism (:extendsByNondeterminism)

SubObjectPropertyOf(:extendsByNondeterminism :modifierRelation)

# Object Property: :isClassOfComplementsFor (:isClassOfComplementsFor)

SubObjectPropertyOf(:isClassOfComplementsFor :modifierRelation)
FunctionalObjectProperty(:isClassOfComplementsFor)
InverseFunctionalObjectProperty(:isClassOfComplementsFor)
SymmetricObjectProperty(:isClassOfComplementsFor)

# Object Property: :isEqualTo (:isEqualTo)

AnnotationAssertion(fowl:tptp_annotation :isEqualTo "![X, Y]:( ~ ( 'isEqualTo'(X, Y) & 'isStrictSubClassOf'(X, Y) ) )")
AnnotationAssertion(fowl:tptp_annotation :isEqualTo "![X, Y]:('isEqualTo'(X, Y) <=> ('isSubClassOf'(X, Y) & 'isSubClassOf'(Y, X) ) )")
SubObjectPropertyOf(:isEqualTo :isSubClassOf)
SymmetricObjectProperty(:isEqualTo)
TransitiveObjectProperty(:isEqualTo)

# Object Property: :isHardFor_wrtLogSpaceReductions (:isHardFor_wrtLogSpaceReductions)

SubObjectPropertyOf(:isHardFor_wrtLogSpaceReductions :isHardFor)

# Object Property: :isHardFor_wrtPolyTimeReductions (:isHardFor_wrtPolyTimeReductions)

SubObjectPropertyOf(:isHardFor_wrtPolyTimeReductions :isHardFor)

# Object Property: :isLevelOf (:isLevelOf)

FunctionalObjectProperty(:isLevelOf)

# Object Property: :isMemberOf (:isMemberOf)

ObjectPropertyDomain(:isMemberOf :DecisionProblem)
ObjectPropertyRange(:isMemberOf :ComplexityClass)

# Object Property: :isReducibleTo_inLogSpace (:isReducibleTo_inLogSpace)

SubObjectPropertyOf(:isReducibleTo_inLogSpace :isReducibleTo)
TransitiveObjectProperty(:isReducibleTo_inLogSpace)

# Object Property: :isReducibleTo_inPolyTime (:isReducibleTo_inPolyTime)

SubObjectPropertyOf(:isReducibleTo_inPolyTime :isReducibleTo)
TransitiveObjectProperty(:isReducibleTo_inPolyTime)

# Object Property: :isStrictSubClassOf (:isStrictSubClassOf)

AnnotationAssertion(fowl:tptp_annotation :isStrictSubClassOf "![X, Y]:( 'isStrictSubClassOf(X, Y)' <=> ('isSubClassOf'(X, Y) & (~ 'isEqualTo'(X, Y) ) ) )")
SubObjectPropertyOf(:isStrictSubClassOf :isSubClassOf)
TransitiveObjectProperty(:isStrictSubClassOf)

# Object Property: :isSubClassOf (:isSubClassOf)

TransitiveObjectProperty(:isSubClassOf)
ObjectPropertyDomain(:isSubClassOf :ComplexityClass)
ObjectPropertyRange(:isSubClassOf :ComplexityClass)

# Object Property: :lessless (:lessless)

TransitiveObjectProperty(:lessless)
ObjectPropertyDomain(:lessless :Bound)
ObjectPropertyRange(:lessless :Bound)

# Object Property: :modifierRelation (:modifierRelation)

ObjectPropertyDomain(:modifierRelation :ComplexityClass)
ObjectPropertyRange(:modifierRelation :ComplexityClass)

# Object Property: :nSpace (:nSpace)

SubObjectPropertyOf(:nSpace :definitionRelation)

# Object Property: :nTime (:nTime)

SubObjectPropertyOf(:nTime :definitionRelation)

# Object Property: :rTime (:rTime)

SubObjectPropertyOf(:rTime :definitionRelation)




############################
#   Named Individuals
############################

# Individual: :BPP (:BPP)

ClassAssertion(:ComplexityClass :BPP)
ObjectPropertyAssertion(:extendsByBoundedProbability :BPP :P)

# Individual: :Elementary (:Elementary)

ClassAssertion(:ComplexityClass :Elementary)
ObjectPropertyAssertion(:dTime :Elementary :Tower)

# Individual: :Exp (:Exp)

ClassAssertion(:Bound :Exp)
ObjectPropertyAssertion(:lessless :Exp <2Exp>)

# Individual: :ExpTime (:ExpTime)

ClassAssertion(:ComplexityClass :ExpTime)
ObjectPropertyAssertion(:dTime :ExpTime :Exp)

# Individual: :L (:L)

ClassAssertion(:ComplexityClass :L)
ObjectPropertyAssertion(:dSpace :L :Log)

# Individual: :Log (:Log)

ClassAssertion(:Bound :Log)
ObjectPropertyAssertion(:lessless :Log :Poly)

# Individual: :NExpTime (:NExpTime)

ClassAssertion(:ComplexityClass :NExpTime)
ObjectPropertyAssertion(:extendsByNondeterminism :NExpTime :ExpTime)

# Individual: :NL (:NL)

ClassAssertion(:ComplexityClass :NL)
ObjectPropertyAssertion(:extendsByNondeterminism :NL :L)

# Individual: :NP (:NP)

ClassAssertion(:ComplexityClass :NP)
ObjectPropertyAssertion(:extendsByNondeterminism :NP :P)

# Individual: :NPSpace (:NPSpace)

ClassAssertion(:ComplexityClass :NPSpace)
ObjectPropertyAssertion(:extendsByNondeterminism :NPSpace :PSpace)

# Individual: :P (:P)

ClassAssertion(:ComplexityClass :P)
ObjectPropertyAssertion(:dTime :P :Poly)

# Individual: :PSpace (:PSpace)

ClassAssertion(:ComplexityClass :PSpace)
ObjectPropertyAssertion(:dSpace :PSpace :Poly)

# Individual: :Poly (:Poly)

ClassAssertion(:Bound :Poly)
ObjectPropertyAssertion(:lessless :Poly :Exp)

# Individual: :Tower (:Tower)

ClassAssertion(:Bound :Tower)

# Individual: :coNL (:coNL)

ClassAssertion(:ComplexityClass :coNL)
ObjectPropertyAssertion(:isClassOfComplementsFor :coNL :NL)
ObjectPropertyAssertion(:isEqualTo :coNL :coNL)

# Individual: :coNP (:coNP)

ClassAssertion(:ComplexityClass :coNP)
ObjectPropertyAssertion(:isClassOfComplementsFor :coNP :NP)

# Individual: <2Exp> (<2Exp>)

ClassAssertion(:Bound <2Exp>)
ObjectPropertyAssertion(:lessless <2Exp> :Tower)

# Individual: <2ExpTime> (<2ExpTime>)

ClassAssertion(:ComplexityClass <2ExpTime>)
ObjectPropertyAssertion(:dTime <2ExpTime> <2Exp>)


SubObjectPropertyOf(ObjectPropertyChain(:dSpace :lessless ObjectInverseOf(:dSpace)) :SpaceHierarchy)
SubObjectPropertyOf(ObjectPropertyChain(:dTime :lessless ObjectInverseOf(:dTime)) :TimeHierarchy)
SubObjectPropertyOf(ObjectPropertyChain(:isMemberOf :isSubClassOf) :isMemberOf)
SubObjectPropertyOf(ObjectPropertyChain(:isOnLevel :isLevelOf) :isFromHierarchy)
SubObjectPropertyOf(ObjectPropertyChain(:isOnLevel :next_inPH ObjectInverseOf(:isOnLevel)) :isSubClassOf)
SubObjectPropertyOf(ObjectPropertyChain(:nSpace ObjectInverseOf(:dSpace)) :extendsByNondeterminism)
SubObjectPropertyOf(ObjectPropertyChain(:nTime ObjectInverseOf(:dTime)) :extendsByNondeterminism)
SubObjectPropertyOf(ObjectPropertyChain(ObjectInverseOf(:extendsByNondeterminism)) :isSubClassOf)
SubObjectPropertyOf(ObjectPropertyChain(ObjectInverseOf(:isReducibleTo) :isHardFor) :isHardFor)
SubObjectPropertyOf(ObjectPropertyChain(ObjectInverseOf(:isReducibleTo_inLogSpace) :isHardFor_wrtLogSpaceReductions) :isHardFor_wrtLogSpaceReductions)
SubObjectPropertyOf(ObjectPropertyChain(ObjectInverseOf(:isReducibleTo_inPolyTime) :isHardFor_wrtPolyTimeReductions) :isHardFor_wrtPolyTimeReductions)
)